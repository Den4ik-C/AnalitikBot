from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
import json
import os

class WalletFSM(StatesGroup):
    name = State()
    network = State()

WALLET_FILE = "wallets.json"

def save_wallet(user_id, wallet):
    data = {}
    if os.path.exists(WALLET_FILE):
        with open(WALLET_FILE, "r") as f:
            data = json.load(f)
    data.setdefault(str(user_id), []).append(wallet)
    with open(WALLET_FILE, "w") as f:
        json.dump(data, f, indent=2)

async def start_wallet_add(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞:")
    await WalletFSM.name.set()

async def wallet_name_entered(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, TON, TRC20, ERC20):")
    await WalletFSM.next()

async def wallet_network_entered(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    wallet = {
        "name": user_data["name"],
        "network": message.text
    }
    save_wallet(message.from_user.id, wallet)
    await message.answer(f"‚úÖ –ö–æ—à–µ–ª—ë–∫ ¬´{wallet['name']}¬ª –≤ —Å–µ—Ç–∏ {wallet['network']} –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish() 
from database import get_user_wallets, get_user_portfolios

async def show_user_wallets(message: types.Message):
    user_id = message.from_user.id
    wallets = get_user_wallets(user_id)

    if not wallets:
        await message.answer("‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–∏ (—á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å)
    portfolios = {str(pid): name for pid, name in get_user_portfolios(user_id)}

    text = "üìã –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n\n"
    for i, (wid, name, network, portfolio_id) in enumerate(wallets, 1):
        if portfolio_id:
            pname = portfolios.get(str(portfolio_id), "‚ùì–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            text += f"{i}. {name} ({network}) ‚Äî üîó {pname}\n"
        else:
            text += f"{i}. {name} ({network}) ‚Äî ‚ùó –ë–µ–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"

    await message.answer(text)