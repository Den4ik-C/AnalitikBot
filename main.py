from database import init_db
init_db() 
from aiogram import Bot, Dispatcher, types, executor
from config import BOT_TOKEN
from menu import main_menu, cabinet_menu, portfolio_menu
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from wallet_fsm import WalletFSM, start_wallet_add, wallet_name_entered, wallet_network_entered 
from wallet_fsm import show_user_wallets 
storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)  

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=main_menu
    )

@dp.message_handler(lambda msg: msg.text == "üìÇ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_menu_handler(message: types.Message):
    await message.answer("–í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=cabinet_menu)

@dp.message_handler(lambda msg: msg.text == "üîç –ü–æ –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def txid_handler(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TXID):")

@dp.message_handler(lambda msg: msg.text == "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
async def instructions_handler(message: types.Message):
    await message.answer("üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—à–µ–ª—ë–∫\n2. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")

@dp.message_handler(lambda msg: msg.text == "üîó –°—Å—ã–ª–∫–∏")
async def links_handler(message: types.Message):
    await message.answer("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n- –ö–∞–Ω–∞–ª: https://https://t.me/invest_watch\n- Dexscreener: https://dexscreener.com/")

@dp.message_handler(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª—ë–∫")
async def add_wallet_handler(message: types.Message):
        await start_wallet_add(message)
@dp.message_handler(lambda msg: msg.text == "üìã –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏")
async def my_wallets_handler(message: types.Message):
        await        show_user_wallets(message)
@dp.message_handler(lambda msg: msg.text == "üíº –ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å")
async def portfolio_menu_handler(message: types.Message):
        await message.answer("üìä –†–∞–±–æ—Ç–∞ —Å –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏:", reply_markup=portfolio_menu)

if __name__ == "__main__":
    dp.register_message_handler(wallet_name_entered, state=WalletFSM.name)
    dp.register_message_handler(wallet_network_entered, state=WalletFSM.network)
    executor.start_polling(dp, skip_updates=True)